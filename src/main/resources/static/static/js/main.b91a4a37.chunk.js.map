{"version":3,"sources":["IntroComponent.js","Header.js","TurnCounter.js","GameComponent.js","App.js","serviceWorker.js","index.js","GameComponent.module.css","IntroComponent.module.css"],"names":["moves","centerAlign","textAlign","IntroComponent","props","isNameGiven","gamerName","setState","showToast","toastText","newGameHandler","event","preventDefault","stablishNewGameConnection","existingGameHandler","renderJoinGameModal","sessionIdHandler","friendSessionId","target","value","nameInputHandler","store","set","stablishJoinGameConnection","socket","SockJS","stompClient","Stomp","over","connect","ownSessionId","processSessionId","subscribe","output","handleGameInit","JSON","parse","body","alert","metadata","send","stringify","renderNewGameModal","url","ws","_transport","window","location","port","replace","hostname","gameInitInfo","opponentSessionId","opponentName","firstTurnSessionId","gameStarted","copySessionIdClipBoard","sidSpanText","sid","console","log","select","setSelectionRange","document","execCommand","copiedToClipboard","modalContent","style","Form","Control","type","ref","readOnly","queryCommandSupported","Button","copyBtn","onClick","className","variant","showModal","Row","Col","Label","onChange","placeholder","state","this","to","Container","styles","vertical_center","xs","md","lg","size","Toast","onClose","show","delay","autohide","Body","Modal","onHide","React","Component","withStore","Header","TurnCounter","counter","counterInterval","setInterval","clearInterval","timerReached","GameComponent","handlePeerDisconnected","get","requestTurnInfo","handleGameResults","gameResults","gameResult","showLost","showDraw","showWin","updateScoreBoard","win","myTurn","gameEnd","showResultsModal","resultOpponent","resultOwn","lose","draw","handleTurn","gameInfo","handleGameData","gameData","coordinate","updateBoard","sendGameData","index","peerSessionId","playerMove","blockId","id","checkResults","possibleWinner","copyBoard","board","ownMoveChar","i","checkLine","isBoardFull","scoreRow","round","scoreTableRows","push","length","a","b","c","isPeer","createBlocks","isMyTurn","blocks","block","occupied","startNewGame","requestStartNewGame","onTimerReached","gameError","isFirstTurn","sm","container","play_area","Table","bordered","tableScoreBody","map","App","exact","path","component","NoMatchPage","createStore","Boolean","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"iTAeMA,EACC,IADDA,EAEC,IAGDC,EAAc,CAChBC,UAAW,UAGTC,E,kDAEF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAcVC,YAAc,WACV,MAAuB,KAAnB,EAAKC,YACL,EAAKC,SAAS,CAAEC,WAAW,IAC3B,EAAKC,UAAY,2BACV,IAnBI,EAwBnBC,eAAiB,SAACC,GACdA,EAAMC,iBACD,EAAKP,eACV,EAAKQ,6BA3BU,EA8BnBC,oBAAsB,SAACH,GACnBA,EAAMC,iBACD,EAAKP,eACV,EAAKU,uBAjCU,EAoCnBC,iBAAmB,SAACL,GAChB,EAAKM,gBAAkBN,EAAMO,OAAOC,OArCrB,EAwCnBC,iBAAmB,SAACT,GAChB,EAAKL,UAAYK,EAAMO,OAAOC,MAC9B,EAAKE,MAAMC,IAAI,YAAa,EAAKhB,YA1ClB,EA6CnBiB,2BAA6B,WACzB,IAAIC,EAAS,IAAIC,IAAO,YACpBC,EAAcC,IAAMC,KAAKJ,GAC7B,EAAKH,MAAMC,IAAI,cAAeI,GAC9BA,EAAYG,QAAQ,IAAI,WACpB,EAAKC,aAAe,EAAKC,iBAAiBL,GAC1C,EAAKL,MAAMC,IAAI,eAAgB,EAAKQ,cACpCJ,EAAYM,UAAU,YAAc,EAAKF,aAAe,cAAc,SAACG,GACnE,EAAKC,eAAeC,KAAKC,MAAMH,EAAOI,UAE1CX,EAAYM,UAAU,YAAc,EAAKF,aAAe,UAAU,SAACG,GAC/DK,MAAMH,KAAKC,MAAMH,EAAOI,MAAME,aAElC,EAAKlB,MAAMC,IAAI,WAAYtB,GAC3B0B,EAAYc,KAAK,wBAAyB,GAAIL,KAAKM,UAAU,CACzD,UAAa,EAAKnC,UAClB,kBAAqB,EAAKW,uBA7DnB,EAkEnBJ,0BAA4B,WACxB,IAAIW,EAAS,IAAIC,IAAO,YACpBC,EAAcC,IAAMC,KAAKJ,GAC7B,EAAKH,MAAMC,IAAI,cAAeI,GAC9BA,EAAYG,QAAQ,IAAI,WACpB,EAAKC,aAAe,EAAKC,iBAAiBL,GAC1C,EAAKL,MAAMC,IAAI,eAAgB,EAAKQ,cACpCJ,EAAYM,UAAU,YAAc,EAAKF,aAAe,cAAc,SAACG,GACnE,EAAKC,eAAeC,KAAKC,MAAMH,EAAOI,UAE1CX,EAAYM,UAAU,YAAc,EAAKF,aAAe,UAAU,SAACG,GAC/DK,MAAMH,KAAKC,MAAMH,EAAOI,MAAME,aAElC,EAAKlB,MAAMC,IAAI,WAAYtB,GAC3B0B,EAAYc,KAAK,wBAAyB,GAAIL,KAAKM,UAAU,CAAE,UAAa,EAAKnC,aACjF,EAAKoC,yBAjFM,EAqFnBX,iBAAmB,SAACL,GAChB,IAAIiB,EAAMjB,EAAYkB,GAAGC,WAAWF,IAQpC,OADAA,GADAA,GALAA,EAA+B,KAAzBG,OAAOC,SAASC,KAClBL,EAAIM,QAAJ,eACYH,OAAOC,SAASG,SAD5B,aACiD,IACjDP,EAAIM,QAAJ,eACYH,OAAOC,SAASG,SAD5B,YACwCJ,OAAOC,SAASC,KADxD,aACyE,KACnEC,QAAQ,aAAc,KACtBA,QAAQ,YAAa,KA7FhB,EAiGnBf,eAAiB,SAACiB,GAAkB,IAC1BC,EAAwDD,EAAxDC,kBAAmBC,EAAqCF,EAArCE,aAAcC,EAAuBH,EAAvBG,mBACvC,EAAKjC,MAAMC,IAAI,gBAAiB8B,GAChC,EAAK/B,MAAMC,IAAI,eAAgB+B,GAC/B,EAAKhC,MAAMC,IAAI,QAAS,GACpBgC,IAAuB,EAAKxB,cAC5B,EAAKT,MAAMC,IAAI,aAAa,GAChC,EAAKf,SAAS,CAAEgD,aAAa,KAxGd,EA2GnBC,uBAAyB,WACrB,IAAIC,EAAc,EAAKC,IACvBC,QAAQC,IAAIH,GACZA,EAAYI,SACZJ,EAAYK,kBAAkB,EAAG,OACjCC,SAASC,YAAY,QACrB,EAAKzD,SAAS,CAAE0D,mBAAmB,KAjHpB,EAoHnBvB,mBAAqB,WACjB,EAAKwB,aAAe,6BAChB,uBAAGC,MAAOlE,GAAV,iDACkD,6BAC9C,kBAACmE,EAAA,EAAKC,QAAN,CAAcC,KAAK,OAAOC,IAAK,SAAAb,GAAG,OAAI,EAAKA,IAAMA,GAAKS,MAAOlE,EAAauE,UAAQ,EAACrD,MAAO,EAAKW,eAC9FiC,SAASU,sBAAsB,SAC5B,kBAACC,EAAA,EAAD,CAAQH,IAAK,SAAAI,GAAO,OAAI,EAAKA,QAAUA,GAASC,QAAS,EAAKpB,uBAAwBqB,UAAU,MAAMC,QAAQ,mBAA9G,kBAGZ,EAAKvE,SAAS,CAAEwE,WAAW,EAAMd,mBAAmB,KA7HrC,EAgInBlD,oBAAsB,WAClB,EAAKmD,aAAe,6BAChB,kBAACc,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,yBAAKd,MAAOlE,GACR,kBAACmE,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKc,MAAN,8BACA,kBAACd,EAAA,EAAKC,QAAN,CAAcc,SAAU,EAAKnE,iBAAkBsD,KAAK,OAAOH,MAAOlE,EAAamF,YAAY,kBAC3F,kBAACV,EAAA,EAAD,CAAQG,UAAU,MAAMD,QAAS,kBAAM,EAAKrD,8BAA8BuD,QAAQ,mBAAlF,uBAMpB,EAAKvE,SAAS,CAAEwE,WAAW,KA5I3B,EAAKM,MAAQ,CACT9B,aAAa,EACbwB,WAAW,EACXvE,WAAW,EACXyD,mBAAmB,GAEvB,EAAKhD,gBAAkB,GACvB,EAAKX,UAAY,GACjB,EAAKwB,aAAe,GACpB,EAAKrB,UAAY,GACjB,EAAKY,MAAQjB,EAAMiB,MAZJ,E,qDAiJT,IAAD,OACL,OAA+B,IAA3BiE,KAAKD,MAAM9B,YACJ,kBAAC,IAAD,CAAUgC,GAAG,UAGpB,kBAACC,EAAA,EAAD,KACI,kBAACR,EAAA,EAAD,CAAKH,UAAS,UAAKY,IAAOC,gBAAZ,4BACV,kBAACT,EAAA,EAAD,CAAKU,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACnB,yBAAK1B,MAAOlE,GACR,8CACA,kBAACyE,EAAA,EAAD,CAAQG,UAAU,MAAMC,QAAQ,kBAAkBgB,KAAK,KAAKlB,QAASU,KAAK5E,gBAA1E,kBACA,kBAACgE,EAAA,EAAD,CAAQG,UAAU,MAAMC,QAAQ,kBAAkBgB,KAAK,KAAKlB,QAASU,KAAKxE,qBAA1E,yBACA,kBAACsD,EAAA,EAAD,CAAMS,UAAU,OACZ,kBAACT,EAAA,EAAKC,QAAN,CAAcyB,KAAK,KAAKX,SAAUG,KAAKlE,iBAAkB+C,MAAOlE,EAAaqE,KAAK,OAAOc,YAAY,qBAEzG,kBAACV,EAAA,EAAD,CAAQG,UAAU,MAAMC,QAAQ,kBAAkBgB,KAAK,KAAKlB,QAAS,kBAAMtC,MAAM,yBAAjF,qBACA,kBAACyD,EAAA,EAAD,CAAOC,QAAS,kBAAM,EAAKzF,SAAS,CAAEC,WAAW,KAAUyF,KAAMX,KAAKD,MAAM7E,UAAW0F,MAAO,KAAMC,UAAQ,GACxG,kBAACJ,EAAA,EAAMK,KAAP,KAAad,KAAK7E,eAKlC,kBAAC4F,EAAA,EAAD,CAAOJ,KAAMX,KAAKD,MAAMN,UAAWuB,OAAQ,kBAAM,EAAK/F,SAAS,CAAEwE,WAAW,MACxE,kBAACsB,EAAA,EAAMD,KAAP,KACKd,KAAKpB,aACLoB,KAAKD,MAAMpB,mBAAqB,uBAAGE,MAAOlE,GAAV,+B,GA5K5BsG,IAAMC,WAoLpBC,cAAUtG,G,iBC1MV,SAASuG,EAAOtG,GAC3B,OACI,wBAAI+D,MAAO,CAACjE,UAAW,WAAvB,2BAA2DE,EAAMiD,c,ICiC1DsD,E,kDAlCX,WAAYvG,GAAQ,IAAD,8BACf,cAAMA,IACDiF,MAAQ,CACTuB,QAAS,GAHE,E,gEAOE,IAAD,OAChBtB,KAAKuB,gBAAkBC,aAAY,WACL,IAAvB,EAAKzB,MAAMuB,SACVG,cAAc,EAAKF,iBACvB,EAAKtG,UAAS,kBAAkB,CAC5BqG,QADU,EAAGA,QACM,QAExB,O,6CAIHG,cAAczB,KAAKuB,mB,+BAGb,IACED,EAAYtB,KAAKD,MAAjBuB,QAGR,OAFe,IAAZA,GACCtB,KAAKlF,MAAM4G,eAEX,6BACiB,IAAZJ,GAAiB,qCAAWA,Q,GA5BnBL,IAAMC,W,QCY1BxG,EACD,IADCA,EAED,IAGCiH,E,kDAEJ,WAAY7G,GAAQ,IAAD,8BACjB,cAAMA,IA8CR8G,uBAAyB,WACvB5E,MAAM,iBAAmB,EAAKjB,MAAM8F,IAAI,gBAAkB,sBAhDzC,EAmDnBC,gBAAkB,WACE,EAAK/F,MAAM8F,IAAI,eACrB3E,KAAK,iBAAkB,GAAIL,KAAKM,UAAU,CAAE,kBAAqB,EAAKpB,MAAM8F,IAAI,qBArD3E,EAwDnBE,kBAAoB,SAACC,GAEnB,OADuBA,EAAfC,YAEN,IAAK,OACH,EAAKC,WACL,MACF,IAAK,OACH,EAAKC,WACL,MACF,IAAK,MACH,EAAKC,UAGT,EAAKC,oBArEY,EAwEnBD,QAAU,WACR,EAAKxD,aAAe,0CACpB,EAAK3D,SAAS,CAAEqH,KAAK,EAAMC,QAAQ,EAAOC,SAAS,EAAMC,kBAAkB,IAC3E,EAAKC,eAAiB,OACtB,EAAKC,UAAY,OA5EA,EA+EnBT,SAAW,WACT,EAAKtD,aAAe,2CACpB,EAAK3D,SAAS,CAAE2H,MAAM,EAAML,QAAQ,EAAOC,SAAS,EAAMC,kBAAkB,IAC5E,EAAKC,eAAiB,MACtB,EAAKC,UAAY,QAnFA,EAsFnBR,SAAW,WACT,EAAKvD,aAAe,6CACpB,EAAK3D,SAAS,CAAE4H,MAAM,EAAMN,QAAQ,EAAOC,SAAS,EAAMC,kBAAkB,IAC5E,EAAKE,UAAY,OACjB,EAAKD,eAAiB,QA1FL,EA6FnBI,WAAa,SAACC,GACmBA,EAAvB/E,qBACmB,EAAKjC,MAAM8F,IAAI,iBACxC,EAAK5G,SAAS,CAAEsH,QAAQ,KAhGT,EAoGnBS,eAAiB,SAACC,GAAc,IACtBC,EAAeD,EAAfC,WACR,EAAKC,YAAYD,GAAY,GAC7B,EAAKjI,SAAS,CAAEsH,QAAQ,KAvGP,EA0GnBa,aAAe,SAACC,GACd,IAAIjH,EAAc,EAAKL,MAAM8F,IAAI,eAC7ByB,EAAgB,EAAKvH,MAAM8F,IAAI,iBACnCzF,EAAYc,KAAK,YAAa,GAAIL,KAAKM,UAAU,CAAE,kBAAqBmG,EAAe,WAAcD,MA7GpF,EAgHnBE,WAAa,SAAClI,GACZ,IAAImI,EAAUnI,EAAMO,OAAO6H,GAAG9F,QAAQ,SAAU,IAChD,EAAKwF,YAAYK,GAAS,GAC1B,EAAKE,eACL,EAAKN,aAAaI,GAClB,EAAKvI,SAAS,CAAEsH,QAAQ,KArHP,EAwHnBmB,aAAe,WAMb,IALA,IAAIC,EAAiB,GACjBC,EAAY,EAAK7D,MAAM8D,MACvBzH,EAAc,EAAKL,MAAM8F,IAAI,eAC7BiC,EAAc,EAAK/H,MAAM8F,IAAI,YAC7ByB,EAAgB,EAAKvH,MAAM8F,IAAI,iBAC1BkC,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAC1B,GAAI,EAAKC,UAAUD,EAAGA,EAAI,EAAGA,EAAI,GAAI,CACnCJ,EAAiBC,EAAUG,GAC3B,MAGJ,IAAK,IAAIA,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAI,EAAKC,UAAUD,EAAGA,EAAI,EAAGA,EAAI,GAAI,CACnCJ,EAAiBC,EAAUG,GAC3B,MAGA,EAAKC,UAAU,EAAG,EAAG,KACvBL,EAAiBC,EAAU,IACzB,EAAKI,UAAU,EAAG,EAAG,KACvBL,EAAiBC,EAAU,IACzBD,IAAmBG,GACrB,EAAK1B,UACLhG,EAAYc,KAAK,mBAAoB,GAAIL,KAAKM,UAAU,CAAE,kBAAqBmG,EAAe,WAAc,UAC5G,EAAKjB,oBACuB,KAAnBsB,GACL,EAAKM,YAAYL,KACnBxH,EAAYc,KAAK,mBAAoB,GAAIL,KAAKM,UAAU,CAAE,kBAAqBmG,EAAe,WAAc,UAC5G,EAAKnB,WACL,EAAKE,qBAtJQ,EA2JnBA,iBAAmB,WACjB,IAAI6B,EAAW,CACbC,MAAO,EAAKpI,MAAM8F,IAAI,SAAW,EACjCc,UAAW,EAAKA,UAChBD,eAAgB,EAAKA,gBAEjB0B,EAAmB,EAAKrE,MAAxBqE,eACNA,EAAeC,KAAKH,GACpB,EAAKjJ,SAAS,CAAEmJ,mBAChB,EAAKrI,MAAMC,IAAI,QAASkI,EAASC,QApKhB,EAuKnBF,YAAc,SAACJ,GACb,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAMS,OAAQP,IAChC,GAAiB,KAAbF,EAAME,GACR,OAAO,EAEX,OAAO,GA5KU,EA+KnBC,UAAY,SAACO,EAAGC,EAAGC,GACjB,IAAIb,EAAY,EAAK7D,MAAM8D,MAC3B,OACED,EAAUW,KAAOX,EAAUY,IAC3BZ,EAAUY,KAAOZ,EAAUa,IAC3Bb,EAAUW,KAAO,EAAKxI,MAAM8F,IAAI,aApLjB,EAwLnBsB,YAAc,SAACK,EAASkB,GACtB,IAAId,EAAY,EAAK7D,MAAM8D,MAEzBD,EAAUJ,GADRkB,EACmB,EAAK3I,MAAM8F,IAAI,cAAgBnH,EAAUA,EAAUA,EAEnD,EAAKqB,MAAM8F,IAAI,YACtC,EAAK5G,SAAS,CAAE4I,MAAOD,KA9LN,EAiMnBe,aAAe,SAACC,GAGd,IAFA,IAAIC,EAAS,GACPhB,EAAU,EAAK9D,MAAf8D,MACGE,EAAI,EAAGA,EAAIF,EAAMS,OAAQP,IAC3Ba,EAEIf,EAAME,KAAOrJ,GAAWmJ,EAAME,KAAOrJ,EAC5CmK,EAAOR,KAAK,yBAAKZ,GAAI,SAAWM,EAAGxE,UAAS,UAAKY,IAAO2E,MAAZ,YAAqB3E,IAAO4E,WAAalB,EAAME,KAE3Fc,EAAOR,KAAK,yBAAKZ,GAAI,SAAWM,EAAGzE,QAAS,EAAKiE,WAAYhE,UAAWY,IAAO2E,SAJ/ED,EAAOR,KAAK,yBAAKZ,GAAI,SAAWM,EAAGxE,UAAS,UAAKY,IAAO2E,MAAZ,YAAqB3E,IAAO4E,WAAalB,EAAME,KAM/F,OAAOc,GA5MU,EA+MnBG,aAAe,WACb,EAAK/J,SAAS,CACZ4I,MAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACxCtB,QAAQ,EACRD,KAAK,EACLM,MAAM,EACNC,MAAM,EACNL,SAAS,IAEX,EAAKV,mBAxNY,EA2NnBmD,oBAAsB,WACpB,IAAI7I,EAAc,EAAKL,MAAM8F,IAAI,eAC7ByB,EAAgB,EAAKvH,MAAM8F,IAAI,iBACnCzF,EAAYc,KAAK,kBAAmB,GAAIL,KAAKM,UAAU,CAAE,kBAAqBmG,KAC9E,EAAK0B,gBA/NY,EAkOnBE,eAAiB,WACf,IAAI9I,EAAc,EAAKL,MAAM8F,IAAI,eAC7ByB,EAAgB,EAAKvH,MAAM8F,IAAI,iBACnC,EAAKK,WACL9F,EAAYc,KAAK,mBAAoB,GAAIL,KAAKM,UAAU,CAAE,kBAAqBmG,EAAe,WAAc,SAC5G,EAAKjB,oBArOL,EAAKtC,MAAQ,CACX8D,MAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACxC9F,aAAc,GACdwE,QAAQ,EACRD,KAAK,EACLM,MAAM,EACNC,MAAM,EACNL,SAAS,EACTC,kBAAkB,EAClB0C,WAAW,EACXf,eAAgB,IAElB,EAAKxF,aAAe,GACpB,EAAK7C,MAAQjB,EAAMiB,MAfF,E,gEAkBE,IAAD,OACdK,EAAc4D,KAAKjE,MAAM8F,IAAI,eAC7BrF,EAAewD,KAAKjE,MAAM8F,IAAI,gBAC9BuD,EAAcpF,KAAKjE,MAAM8F,IAAI,aAC5BzF,GAIDgJ,GACFpF,KAAK/E,SAAS,CAAEsH,QAAQ,IAC1BnG,EAAYM,UAAU,YAAcF,EAAe,SAAS,SAACG,GAC3D,EAAKqG,eAAenG,KAAKC,MAAMH,EAAOI,UAExCX,EAAYM,UAAU,YAAcF,EAAe,cAAc,SAACG,GAChE,EAAKmG,WAAWjG,KAAKC,MAAMH,EAAOI,UAEpCX,EAAYM,UAAU,YAAcF,EAAe,gBAAgB,SAACG,GAClE,EAAKoF,kBAAkBlF,KAAKC,MAAMH,EAAOI,UAE3CX,EAAYM,UAAU,YAAcF,EAAe,eAAe,WAChEQ,MAAM,uBAAyB,EAAK+C,MAAMhC,cAC1C,EAAKiH,kBAEP5I,EAAYM,UAAU,YAAcF,EAAe,sBAAsB,WACvE,EAAKoF,4BAEP5B,KAAK/E,SAAS,CAAE8C,aAAciC,KAAKjE,MAAM8F,IAAI,mBArB3C7B,KAAK/E,SAAS,CAAEkK,WAAW,M,+BAmNrB,IAAD,SAC4CnF,KAAKD,MAAlDwC,EADC,EACDA,OAAQC,EADP,EACOA,QAASzE,EADhB,EACgBA,aACvB,OAFO,EAC8BoH,UAE5B,kBAAC,IAAD,CAAUlF,GAAG,MAEpB,6BACE,kBAACmB,EAAD,CAAQrD,aAAcA,IACtB,kBAACmC,EAAA,EAAD,KACE,kBAACR,EAAA,EAAD,CAAKH,UAAU,0BACb,kBAACI,EAAA,EAAD,CAAKU,GAAG,KAAKgF,GAAG,IAAI9E,GAAG,KACrB,yBAAKhB,UAAWY,IAAOmF,WACnB/C,IAAWC,GACX,6BACE,6CACA,kBAAC,EAAD,CAAad,aAAc1B,KAAKkF,mBAEjC3C,IAAWC,GAAY,mCAASzE,EAAT,WAC1B,yBAAKwB,UAAWY,IAAOoF,WACpBvF,KAAK2E,aAAa3E,KAAKD,MAAMwC,SAE/BC,GAAW,kBAACpD,EAAA,EAAD,CAAQI,QAAQ,kBAAkBD,UAAU,MAAMD,QAASU,KAAKiF,qBAAhE,oBACZ,qCACA,kBAACO,EAAA,EAAD,CAAOC,UAAQ,EAACjF,KAAK,KAAKhB,QAAQ,QAChC,+BACE,4BACE,qCACA,4BAAKQ,KAAKjE,MAAM8F,IAAI,cACpB,4BAAK7B,KAAKjE,MAAM8F,IAAI,mBAGxB,2BAAO5C,IAAK,SAAAyG,GAAc,OAAI,EAAKA,eAAiBA,IACjD1F,KAAKD,MAAMqE,eAAeuB,KAAI,SAAAzB,GAE7B,OACE,4BACE,4BAAKA,EAASC,OACd,4BAAKD,EAASvB,WACd,4BAAKuB,EAASxB,0BAUhC,kBAAC3B,EAAA,EAAD,CAAOJ,KACLX,KAAKD,MAAMyC,SAAWxC,KAAKD,MAAM0C,iBACjCzB,OAAQ,kBAAM,EAAK/F,SAAS,CAAEwH,kBAAkB,MAChD,kBAAC1B,EAAA,EAAMD,KAAP,KACGd,KAAKpB,oB,GA/RUqC,IAAMC,WAuSnBC,cAAUQ,GC/SnBiE,E,uKAGF,OACE,kBAAC,IAAD,KACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlL,IACjC,kBAAC,IAAD,CAAOgL,OAAK,EAACC,KAAK,QAAQC,UAAWpE,IACrC,kBAAC,IAAD,CAAOoE,UAAWC,U,GARZ/E,IAAMC,WAelB8E,EAAc,WAClB,OACE,6BACE,+CACA,kBAAC,IAAD,CAAM/F,GAAG,KAAT,kBAKSgG,cAAYL,GCvBPM,QACW,cAA7B1I,OAAOC,SAASG,UAEe,UAA7BJ,OAAOC,SAASG,UAEhBJ,OAAOC,SAASG,SAASuI,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,EAAD,MACA5H,SAAS6H,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzI,QAAQyI,MAAMA,EAAMC,a,mBExI5BC,EAAOC,QAAU,CAAC,UAAY,iCAAiC,MAAQ,6BAA6B,SAAW,gCAAgC,QAAU,+BAA+B,QAAU,+BAA+B,QAAU,+BAA+B,QAAU,+BAA+B,QAAU,+BAA+B,QAAU,+BAA+B,QAAU,+BAA+B,QAAU,+BAA+B,UAAY,mC,mBCAneD,EAAOC,QAAU,CAAC,gBAAkB,0C","file":"static/js/main.b91a4a37.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { withStore } from '@spyna/react-store'\r\nimport { Redirect } from 'react-router-dom';\r\nimport styles from './IntroComponent.module.css';\r\nimport SockJS from \"sockjs-client\";\r\nimport Stomp from \"stomp-websocket\";\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Toast from 'react-bootstrap/Toast'\r\n\r\nconst moves = {\r\n    X: \"X\",\r\n    O: \"O\"\r\n}\r\n\r\nconst centerAlign = {\r\n    textAlign: \"center\" // improve\r\n}\r\n\r\nclass IntroComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            gameStarted: false,\r\n            showModal: false,\r\n            showToast: false,\r\n            copiedToClipboard: false\r\n        }\r\n        this.friendSessionId = \"\";\r\n        this.gamerName = \"\";\r\n        this.ownSessionId = \"\";\r\n        this.toastText = \"\";\r\n        this.store = props.store;\r\n    }\r\n\r\n    isNameGiven = () => {\r\n        if (this.gamerName === \"\") {\r\n            this.setState({ showToast: true })\r\n            this.toastText = \"Please enter your name!\"\r\n            return false;\r\n        }\r\n        else return true;\r\n    }\r\n\r\n    newGameHandler = (event) => {\r\n        event.preventDefault();\r\n        if (!this.isNameGiven()) return;\r\n        this.stablishNewGameConnection();\r\n    }\r\n\r\n    existingGameHandler = (event) => {\r\n        event.preventDefault();\r\n        if (!this.isNameGiven()) return;\r\n        this.renderJoinGameModal();\r\n    }\r\n\r\n    sessionIdHandler = (event) => {\r\n        this.friendSessionId = event.target.value;\r\n    }\r\n\r\n    nameInputHandler = (event) => {\r\n        this.gamerName = event.target.value;\r\n        this.store.set(\"gamerName\", this.gamerName);\r\n    }\r\n\r\n    stablishJoinGameConnection = () => {\r\n        let socket = new SockJS('/tic-tac');\r\n        let stompClient = Stomp.over(socket);\r\n        this.store.set(\"stompClient\", stompClient);\r\n        stompClient.connect({}, () => {\r\n            this.ownSessionId = this.processSessionId(stompClient);\r\n            this.store.set(\"ownSessionId\", this.ownSessionId);\r\n            stompClient.subscribe(\"/ws-user/\" + this.ownSessionId + \"/game-init\", (output) => {\r\n                this.handleGameInit(JSON.parse(output.body));\r\n            })\r\n            stompClient.subscribe(\"/ws-user/\" + this.ownSessionId + \"/error\", (output) => {\r\n                alert(JSON.parse(output.body).metadata)\r\n            })\r\n            this.store.set(\"moveChar\", moves.O)\r\n            stompClient.send(\"/app/client-two-start\", {}, JSON.stringify({\r\n                \"gamerName\": this.gamerName,\r\n                \"opponentSessionId\": this.friendSessionId\r\n            }));\r\n        })\r\n    } // TODO: still needy for refactoring\r\n\r\n    stablishNewGameConnection = () => {\r\n        let socket = new SockJS('/tic-tac');\r\n        let stompClient = Stomp.over(socket);\r\n        this.store.set(\"stompClient\", stompClient);\r\n        stompClient.connect({}, () => {\r\n            this.ownSessionId = this.processSessionId(stompClient);\r\n            this.store.set(\"ownSessionId\", this.ownSessionId);\r\n            stompClient.subscribe(\"/ws-user/\" + this.ownSessionId + \"/game-init\", (output) => {\r\n                this.handleGameInit(JSON.parse(output.body));\r\n            })\r\n            stompClient.subscribe(\"/ws-user/\" + this.ownSessionId + \"/error\", (output) => {\r\n                alert(JSON.parse(output.body).metadata)\r\n            })\r\n            this.store.set(\"moveChar\", moves.X)\r\n            stompClient.send(\"/app/client-one-start\", {}, JSON.stringify({ \"gamerName\": this.gamerName }));\r\n            this.renderNewGameModal();\r\n        })\r\n    }\r\n\r\n    processSessionId = (stompClient) => {\r\n        let url = stompClient.ws._transport.url;\r\n        url = window.location.port === \"\" ?\r\n            url.replace(\r\n                `ws://${window.location.hostname}/tic-tac/`, \"\") :\r\n            url.replace(\r\n                `ws://${window.location.hostname}:${window.location.port}/tic-tac/`, \"\");;\r\n        url = url.replace(\"/websocket\", \"\");\r\n        url = url.replace(/^[0-9]+\\//, \"\");\r\n        return url;\r\n    }\r\n\r\n    handleGameInit = (gameInitInfo) => {\r\n        let { opponentSessionId, opponentName, firstTurnSessionId } = gameInitInfo;\r\n        this.store.set(\"peerSessionId\", opponentSessionId);\r\n        this.store.set(\"opponentName\", opponentName);\r\n        this.store.set(\"round\", 0);\r\n        if (firstTurnSessionId === this.ownSessionId)\r\n            this.store.set(\"firstTurn\", true);\r\n        this.setState({ gameStarted: true })\r\n    }\r\n\r\n    copySessionIdClipBoard = () => {\r\n        let sidSpanText = this.sid;\r\n        console.log(sidSpanText)\r\n        sidSpanText.select();\r\n        sidSpanText.setSelectionRange(0, 99999);\r\n        document.execCommand(\"copy\");\r\n        this.setState({ copiedToClipboard: true })\r\n    }\r\n\r\n    renderNewGameModal = () => {\r\n        this.modalContent = <div>\r\n            <p style={centerAlign}>\r\n                Copy this Game ID and send it to your friend! <br />\r\n                <Form.Control type=\"text\" ref={sid => this.sid = sid} style={centerAlign} readOnly value={this.ownSessionId}></Form.Control>\r\n                {document.queryCommandSupported('copy') &&\r\n                    <Button ref={copyBtn => this.copyBtn = copyBtn} onClick={this.copySessionIdClipBoard} className=\"m-1\" variant=\"outline-primary\">Copy game ID</Button>}\r\n            </p>\r\n        </div>\r\n        this.setState({ showModal: true, copiedToClipboard: false })\r\n    }\r\n\r\n    renderJoinGameModal = () => {\r\n        this.modalContent = <div>\r\n            <Row>\r\n                <Col>\r\n                    <div style={centerAlign}>\r\n                        <Form>\r\n                            <Form.Label>Your friend's game ID</Form.Label>\r\n                            <Form.Control onChange={this.sessionIdHandler} type=\"text\" style={centerAlign} placeholder=\"Enter game ID\" />\r\n                            <Button className=\"m-1\" onClick={() => this.stablishJoinGameConnection()} variant=\"outline-primary\">Start new game</Button>\r\n                        </Form>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n        this.setState({ showModal: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.gameStarted === true) {\r\n            return <Redirect to='/game' />\r\n        }\r\n        return (\r\n            <Container>\r\n                <Row className={`${styles.vertical_center} justify-content-center`}>\r\n                    <Col xs=\"10\" md=\"8\" lg=\"6\">\r\n                        <div style={centerAlign}>\r\n                            <h1>Tic tac toe!!!</h1>\r\n                            <Button className=\"m-1\" variant=\"outline-primary\" size=\"lg\" onClick={this.newGameHandler}>Start new game</Button>\r\n                            <Button className=\"m-1\" variant=\"outline-primary\" size=\"lg\" onClick={this.existingGameHandler}>Join an existing game</Button>\r\n                            <Form className=\"m-1\">\r\n                                <Form.Control size=\"lg\" onChange={this.nameInputHandler} style={centerAlign} type=\"text\" placeholder=\"Enter your name\" />\r\n                            </Form>\r\n                            <Button className=\"m-1\" variant=\"outline-primary\" size=\"lg\" onClick={() => alert(\"Not yet implemented\")}>Start vs computer</Button>\r\n                            <Toast onClose={() => this.setState({ showToast: false })} show={this.state.showToast} delay={1500} autohide>\r\n                                <Toast.Body>{this.toastText}</Toast.Body>\r\n                            </Toast>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Modal show={this.state.showModal} onHide={() => this.setState({ showModal: false })}>\r\n                    <Modal.Body>\r\n                        {this.modalContent}\r\n                        {this.state.copiedToClipboard && <p style={centerAlign}>Copied to clipboard!</p>}\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Container>\r\n        ) // convert Modal as a standalone react component\r\n    }\r\n}\r\n\r\nexport default withStore(IntroComponent);","import React from \"react\";\r\n\r\nexport default function Header(props) {\r\n    return (\r\n        <h1 style={{textAlign: \"center\"}}> You're playing against {props.opponentName}</h1>\r\n    )\r\n}","import React from 'react';\r\n\r\nclass TurnCounter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            counter: 3\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.counterInterval = setInterval(() => {\r\n            if(this.state.counter === 1)\r\n                clearInterval(this.counterInterval);\r\n            this.setState(({ counter }) => ({\r\n                counter: counter - 1\r\n              }))\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.counterInterval)\r\n    }\r\n\r\n    render() {\r\n        const { counter } = this.state;\r\n        if(counter === 0)\r\n            this.props.timerReached();\r\n        return (\r\n            <div>\r\n                {counter !== 0 && <h4>Time: {counter}</h4>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default TurnCounter;","import React from 'react';\r\nimport { withStore } from '@spyna/react-store';\r\nimport { Redirect } from 'react-router-dom';\r\nimport styles from './GameComponent.module.css';\r\nimport Header from './Header';\r\nimport TurnCounter from './TurnCounter';\r\n\r\nimport Button from 'react-bootstrap/Button'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Table from 'react-bootstrap/Table'\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nconst moves = {\r\n  X: \"X\",\r\n  O: \"O\"\r\n}\r\n\r\nclass GameComponent extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      opponentName: \"\",\r\n      myTurn: false,\r\n      win: false,\r\n      lose: false,\r\n      draw: false,\r\n      gameEnd: false,\r\n      showResultsModal: false,\r\n      gameError: false,\r\n      scoreTableRows: []\r\n    }\r\n    this.modalContent = \"\";\r\n    this.store = props.store;\r\n  }\r\n\r\n  componentDidMount() {\r\n    let stompClient = this.store.get(\"stompClient\");\r\n    let ownSessionId = this.store.get(\"ownSessionId\");\r\n    let isFirstTurn = this.store.get(\"firstTurn\");\r\n    if (!stompClient) {\r\n      this.setState({ gameError: true })\r\n      return;\r\n    }\r\n    if (isFirstTurn)\r\n      this.setState({ myTurn: true })\r\n    stompClient.subscribe(\"/ws-user/\" + ownSessionId + \"/game\", (output) => {\r\n      this.handleGameData(JSON.parse(output.body));\r\n    })\r\n    stompClient.subscribe(\"/ws-user/\" + ownSessionId + \"/turn-info\", (output) => {\r\n      this.handleTurn(JSON.parse(output.body))\r\n    });\r\n    stompClient.subscribe(\"/ws-user/\" + ownSessionId + \"/game-result\", (output) => {\r\n      this.handleGameResults(JSON.parse(output.body));\r\n    });\r\n    stompClient.subscribe(\"/ws-user/\" + ownSessionId + \"/game-reset\", () => {\r\n      alert(\"New game started by \" + this.state.opponentName);\r\n      this.startNewGame();\r\n    });\r\n    stompClient.subscribe(\"/ws-user/\" + ownSessionId + \"/peer-disconnected\", () => {\r\n      this.handlePeerDisconnected();\r\n    });\r\n    this.setState({ opponentName: this.store.get(\"opponentName\") })\r\n  }\r\n\r\n  handlePeerDisconnected = () => {\r\n    alert(\"Your opponent \" + this.store.get(\"opponentName\") + \" has disconnected\")\r\n  }\r\n\r\n  requestTurnInfo = () => {\r\n    let stompClient = this.store.get(\"stompClient\");\r\n    stompClient.send(\"/app/turn-info\", {}, JSON.stringify({ \"opponentSessionId\": this.store.get(\"peerSessionId\") }));\r\n  }\r\n\r\n  handleGameResults = (gameResults) => {\r\n    const { gameResult } = gameResults;\r\n    switch(gameResult) {\r\n      case \"lost\":\r\n        this.showLost();\r\n        break;\r\n      case \"draw\":\r\n        this.showDraw();\r\n        break;\r\n      case \"win\":\r\n        this.showWin();\r\n        break;\r\n    }\r\n    this.updateScoreBoard();\r\n  }\r\n\r\n  showWin = () => {\r\n    this.modalContent = <h1>You won!!!</h1>\r\n    this.setState({ win: true, myTurn: false, gameEnd: true, showResultsModal: true })\r\n    this.resultOpponent = \"Lose\";\r\n    this.resultOwn = \"Win\";\r\n  }\r\n\r\n  showLost = () => {\r\n    this.modalContent = <h1>You lost!!!</h1>\r\n    this.setState({ lose: true, myTurn: false, gameEnd: true, showResultsModal: true })\r\n    this.resultOpponent = \"Win\";\r\n    this.resultOwn = \"Lose\";\r\n  }\r\n\r\n  showDraw = () => {\r\n    this.modalContent = <h1>Its a draw!!!</h1>\r\n    this.setState({ draw: true, myTurn: false, gameEnd: true, showResultsModal: true })\r\n    this.resultOwn = \"Draw\";\r\n    this.resultOpponent = \"Draw\";\r\n  }\r\n\r\n  handleTurn = (gameInfo) => {\r\n    const { firstTurnSessionId } = gameInfo\r\n    if (firstTurnSessionId === this.store.get(\"ownSessionId\")) {\r\n      this.setState({ myTurn: true })\r\n    }\r\n  }\r\n\r\n  handleGameData = (gameData) => {\r\n    const { coordinate } = gameData\r\n    this.updateBoard(coordinate, true)\r\n    this.setState({ myTurn: true })\r\n  }\r\n\r\n  sendGameData = (index) => {\r\n    let stompClient = this.store.get(\"stompClient\");\r\n    let peerSessionId = this.store.get(\"peerSessionId\");\r\n    stompClient.send(\"/app/game\", {}, JSON.stringify({ \"opponentSessionId\": peerSessionId, \"coordinate\": index }));\r\n  }\r\n\r\n  playerMove = (event) => {\r\n    let blockId = event.target.id.replace(\"block_\", \"\")\r\n    this.updateBoard(blockId, false)\r\n    this.checkResults();\r\n    this.sendGameData(blockId)\r\n    this.setState({ myTurn: false })\r\n  }\r\n\r\n  checkResults = () => {\r\n    let possibleWinner = \"\";\r\n    let copyBoard = this.state.board;\r\n    let stompClient = this.store.get(\"stompClient\");\r\n    let ownMoveChar = this.store.get(\"moveChar\");\r\n    let peerSessionId = this.store.get(\"peerSessionId\");\r\n    for (let i = 0; i < 9; i += 3) {\r\n      if (this.checkLine(i, i + 1, i + 2)) {\r\n        possibleWinner = copyBoard[i];\r\n        break;\r\n      }\r\n    }\r\n    for (let i = 0; i < 3; i++) {\r\n      if (this.checkLine(i, i + 3, i + 6)) {\r\n        possibleWinner = copyBoard[i];\r\n        break;\r\n      }\r\n    }\r\n    if (this.checkLine(0, 4, 8))\r\n      possibleWinner = copyBoard[0];\r\n    if (this.checkLine(2, 4, 6))\r\n      possibleWinner = copyBoard[2];\r\n    if (possibleWinner === ownMoveChar) {\r\n      this.showWin();\r\n      stompClient.send(\"/app/game-result\", {}, JSON.stringify({ \"opponentSessionId\": peerSessionId, \"gameResult\": \"lost\" }));\r\n      this.updateScoreBoard();\r\n    } else if (possibleWinner === \"\") {\r\n      if (this.isBoardFull(copyBoard)) {\r\n        stompClient.send(\"/app/game-result\", {}, JSON.stringify({ \"opponentSessionId\": peerSessionId, \"gameResult\": \"draw\" }));\r\n        this.showDraw();\r\n        this.updateScoreBoard();\r\n      }\r\n    }\r\n  }\r\n\r\n  updateScoreBoard = () => {\r\n    let scoreRow = {\r\n      round: this.store.get(\"round\") + 1,\r\n      resultOwn: this.resultOwn,\r\n      resultOpponent: this.resultOpponent\r\n    }\r\n    let { scoreTableRows } = this.state;\r\n    scoreTableRows.push(scoreRow);\r\n    this.setState({ scoreTableRows })\r\n    this.store.set(\"round\", scoreRow.round)\r\n  }\r\n\r\n  isBoardFull = (board) => {\r\n    for (let i = 0; i < board.length; i++) {\r\n      if (board[i] === \"\")\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  checkLine = (a, b, c) => {\r\n    let copyBoard = this.state.board;\r\n    return (\r\n      copyBoard[a] === copyBoard[b] &&\r\n      copyBoard[b] === copyBoard[c] &&\r\n      copyBoard[a] === this.store.get(\"moveChar\")\r\n    );\r\n  }\r\n\r\n  updateBoard = (blockId, isPeer) => {\r\n    let copyBoard = this.state.board;\r\n    if (isPeer)\r\n      copyBoard[blockId] = this.store.get(\"moveChar\") === moves.X ? moves.O : moves.X\r\n    else\r\n      copyBoard[blockId] = this.store.get(\"moveChar\")\r\n    this.setState({ board: copyBoard })\r\n  }\r\n\r\n  createBlocks = (isMyTurn) => {\r\n    let blocks = []\r\n    let { board } = this.state\r\n    for (let i = 0; i < board.length; i++) {\r\n      if (!isMyTurn)\r\n        blocks.push(<div id={\"block_\" + i} className={`${styles.block} ${styles.occupied}`}>{board[i]}</div>)\r\n      else if (board[i] === moves.O || board[i] === moves.X)\r\n        blocks.push(<div id={\"block_\" + i} className={`${styles.block} ${styles.occupied}`}>{board[i]}</div>)\r\n      else\r\n        blocks.push(<div id={\"block_\" + i} onClick={this.playerMove} className={styles.block}></div>)\r\n    }\r\n    return blocks;\r\n  }\r\n\r\n  startNewGame = () => {\r\n    this.setState({\r\n      board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      myTurn: false,\r\n      win: false,\r\n      lose: false,\r\n      draw: false,\r\n      gameEnd: false\r\n    })\r\n    this.requestTurnInfo();\r\n  }\r\n\r\n  requestStartNewGame = () => {\r\n    let stompClient = this.store.get(\"stompClient\")\r\n    let peerSessionId = this.store.get(\"peerSessionId\")\r\n    stompClient.send(\"/app/game-reset\", {}, JSON.stringify({ \"opponentSessionId\": peerSessionId }))\r\n    this.startNewGame();\r\n  }\r\n\r\n  onTimerReached = () => {\r\n    let stompClient = this.store.get(\"stompClient\");\r\n    let peerSessionId = this.store.get(\"peerSessionId\")\r\n    this.showLost();\r\n    stompClient.send(\"/app/game-result\", {}, JSON.stringify({ \"opponentSessionId\": peerSessionId, \"gameResult\": \"win\" }));\r\n    this.updateScoreBoard();\r\n  }\r\n\r\n  render() {\r\n    let { myTurn, gameEnd, opponentName, gameError } = this.state;\r\n    if (gameError)\r\n      return <Redirect to=\"/\" />\r\n    return (\r\n      <div>\r\n        <Header opponentName={opponentName} />\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col xs=\"10\" sm=\"6\" lg=\"4\">\r\n              <div className={styles.container}>\r\n                {(myTurn && !gameEnd) &&\r\n                  <div>\r\n                    <h1>Its your turn</h1>\r\n                    <TurnCounter timerReached={this.onTimerReached} />\r\n                  </div>}\r\n                {(!myTurn && !gameEnd) && <h1>Its {opponentName}'s turn</h1>}\r\n                <div className={styles.play_area}>\r\n                  {this.createBlocks(this.state.myTurn)}\r\n                </div>\r\n                {gameEnd && <Button variant=\"outline-success\" className=\"m-3\" onClick={this.requestStartNewGame}>Start a new game</Button>}\r\n                <h4>Score</h4>\r\n                <Table bordered size=\"sm\" variant=\"dark\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Round</th>\r\n                      <th>{this.store.get(\"gamerName\")}</th>\r\n                      <th>{this.store.get(\"opponentName\")}</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody ref={tableScoreBody => this.tableScoreBody = tableScoreBody}>\r\n                    {this.state.scoreTableRows.map(scoreRow => {\r\n                      // turn this into a function component, also Table into a different component\r\n                      return (\r\n                        <tr>\r\n                          <td>{scoreRow.round}</td>\r\n                          <td>{scoreRow.resultOwn}</td>\r\n                          <td>{scoreRow.resultOpponent}</td>\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </tbody>\r\n                </Table>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n        <Modal show={\r\n          this.state.gameEnd && this.state.showResultsModal\r\n        } onHide={() => this.setState({ showResultsModal: false })}>\r\n          <Modal.Body>\r\n            {this.modalContent}\r\n          </Modal.Body>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStore(GameComponent);\r\n","import React from \"react\";\nimport { createStore } from '@spyna/react-store'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport IntroComponent from \"./IntroComponent\";\nimport GameComponent from './GameComponent';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <Router>\n          <Switch>\n            <Route exact path=\"/\" component={IntroComponent} />\n            <Route exact path=\"/game\" component={GameComponent} />\n            <Route component={NoMatchPage} />\n          </Switch>\n      </Router>\n    )\n  }\n}\n\nconst NoMatchPage = () => {\n  return (\n    <div>\n      <h3>404 - Not found</h3>\n      <Link to=\"/\">Back to game</Link>\n    </div>\n  );\n};\n\nexport default createStore(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"play_area\":\"GameComponent_play_area__3juk5\",\"block\":\"GameComponent_block__2CsDk\",\"occupied\":\"GameComponent_occupied__18t2R\",\"block_0\":\"GameComponent_block_0__3vmEi\",\"block_1\":\"GameComponent_block_1__2P8ke\",\"block_2\":\"GameComponent_block_2__fvfJb\",\"block_3\":\"GameComponent_block_3__1y80p\",\"block_6\":\"GameComponent_block_6__W9tpw\",\"block_7\":\"GameComponent_block_7__2eyd9\",\"block_8\":\"GameComponent_block_8__3DPrh\",\"block_5\":\"GameComponent_block_5__3PHjz\",\"container\":\"GameComponent_container__2T2J_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"vertical_center\":\"IntroComponent_vertical_center__1SCGZ\"};"],"sourceRoot":""}